{
    // Settings
    "passfail"      : false,  // Stop on first error.
    "maxerr"        : 50,     // Maximum error before stopping.

    // Predefined globals whom JSHint will ignore.
    "browser"       : true,   // Standard browser globals e.g. `window`, `document`.
    "node"          : true,
    "rhino"         : false,
    "couch"         : false,
    "wsh"           : false,  // Windows Scripting Host.
    "jquery"        : false,
    "prototypejs"   : false,
    "mootools"      : false,
    "dojo"          : false,

    "predef"        : [       // Custom globals.
        "escape",
        "unescape",           // aren't picked up by node flag above :/
        "define",
        "require",
        "exports",
        "module",
        "describe",
        "before",
        "beforeEach",
        "after",
        "afterEach",
        "it"
    ],

    // Development.
    "debug"         : false,  // Allow debugger statements e.g. browser breakpoints.
    "devel"         : true,   // Allow developments statements e.g. `console.log();`.

    // EcmaScript 5.
    "es5"           : false,  // Allow EcmaScript 5 syntax.
    "esnext"        : true,   // Allow ES "next" syntax, specifically 'const' (V8 has this)
    "strict"        : true,   // Require `use strict` pragma  in every file.
    "globalstrict"  : false,  // Allow global "use strict" (also enables 'strict').

    // The Good Parts.
    "asi"           : false,  // Tolerate Automatic Semicolon Insertion (no semicolons).
    "bitwise"       : true,   // Prohibit bitwise operators (&, |, ^, etc.).
    "boss"          : true,   // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "camelcase"     : false,  // Identifiers must be in camelcase
    "curly"         : true,   // Require {} for every new block or scope.
    "eqeqeq"        : true,   // Require triple equals i.e. `===`.
    "eqnull"        : true,   // Tolerate use of `== null`.
    "evil"          : false,  // Tolerate use of `eval`.
    "expr"          : true,   // Tolerate `ExpressionStatement` as Programs.
    "forin"         : false,  // Tolerate `for in` loops without `hasOwnPrototype`.
    "funcscope"     : false,  // true: Tolerate defining variables inside control statements
    "immed"         : false,  // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : false,  // Prohibit variable use before definition.
    "laxbreak"      : false,  // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "lastsemic"     : false,  // true: Tolerate omitting a semicolon for the last statement of a 1-line block
    "laxbreak"      : false,  // true: Tolerate possibly unsafe line breakings
    "laxcomma"      : false,  // true: Tolerate comma-first style coding
    "loopfunc"      : false,  // Allow functions to be defined within loops.
    "multistr"      : true,   // true: Tolerate multi-line strings
    "noarg"         : true,   // Prohibit use of `arguments.caller` and `arguments.callee`.
    "regexp"        : true,   // Prohibit `.` and `[^...]` in regular expressions.
    "regexdash"     : false,  // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : true,   // Tolerate script-targeted URLs.
    "shadow"        : false,  // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "supernew"      : false,  // Tolerate `new function () { ... };` and `new Object;`.
    "undef"         : true,   // Require all non-global variables be declared before they are used.
    "unused"        : "vars",

    // Personal styling prefrences.
    "indent"        : 4,
    "quotmark"     : "single",
    "lastsemic"     : true,   // Prohibit missing semicolon for the last statement in a one-line block
    "maxparams"     : false,  // {int} Max number of formal params allowed per function
    "maxdepth"      : false,  // {int} Max depth of nested blocks (within functions)
    "maxstatements" : false,  // {int} Max number statements per function
    "maxcomplexity" : false,  // {int} Max cyclomatic complexity per function
    "maxlen"        : 120,    // {int} Max number of characters per line
    "newcap"        : true,   // Require capitalization of all constructor functions e.g. `new F()`.
    "noempty"       : true,   // Prohipit use of empty blocks.
    "nonew"         : true,   // Prohibit use of constructors for side-effects.
    "nomen"         : false,  // Prohibit use of initial or trailing underbars in names.
    "onevar"        : false,  // Allow only one `var` statement per function.
    "onecase"       : false,  // Allow switches with one case statement
    "plusplus"      : false,  // Prohibit use of `++` & `--`.
    "proto"         : false,  // Allow use of __proto__
    "sub"           : true,   // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "trailing"      : true,   // Prohibit trailing whitespaces.
    "white"         : false,  // Check against strict whitespace and indentation rules.

    // Custom Globals
    "globals": {
      "angular"     : true,
      "define"      : false,
      "require"     : false,
      "exports"     : false,
      "module"      : false,
      "describe"    : false,
      "before"      : false,
      "beforeEach"  : false,
      "after"       : false,
      "afterEach"   : false,
      "it"          : false,
      "inject"      : false,
      "expect"      : false,
      "spyOn"       : false
    }
}